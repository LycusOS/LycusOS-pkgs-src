#!/bin/bash
key_layout() {
	title="Key layout" default="us" \
	menu $(find /usr/share/kbd/keymaps/ -type f -printf "%f\n" | sort -V | sed 's|.map.gz||' | sed '2d')
	if [[ "${?}" == "0" ]]; then
		KEYMAP="${selected_element}"
		loadkeys "${KEYMAP}"
	fi
}
wlan() {
	local device=$(iwctl -- device list | grep -o '\w*wl\w*')
	iwctl -- station "${device}" scan
	iwctl -- station "${device}" get-networks
	read -p "Enter network name/SSID: " ssid
	iwctl -- station "${device}" connect "${ssid}"
}
partitions() {
	formatter() {
		local fstype="${1}"
		case "${fstype}" in
			"btrfs") FS_UTILS+=( "btrfs-progs" );;
			"ext4") FS_UTILS+=( "e2fsprogs" );;
			"f2fs") FS_UTILS+=( "f2fs-tools" );;
			"fat32") FS_UTILS+=( "dosfstools" );;
		esac
		if [[ "${fstype}" == "fat32" ]]; then
			fstype="vfat -F 32"
		fi
		wipefs -a "${2}" && eval mkfs."${fstype}" "${2}"
	}
	mounter() {
		case "${2}" in
			"other") mounter "${1}" $(whiptail --title "Mount ${1}" --inputbox "Enter mountpoint" 0 0 3>&1 1>&2 2>&3);;
			"/") mount "${1}" /mnt/"${2}";;
			*)
				if ! findmnt /mnt > /dev/null; then
					whiptail --msgbox "Please mount root(/) partition first..." 0 0
				else
					mkdir -p /mnt/"${2}" && mount "${1}" /mnt/"${2}"
				fi
			;;
		esac
	}
	auto_partitions() {
		title="Auto partitions" \
		menu $(lsblk -dnp -o name)
		if [[ "${?}" == "0" ]]; then
			whiptail --title "Auto partitions" --yesno "Selected ${selected_element}, proceed?" 0 0 3>&1 1>&2 2>&3
			if [[ "${?}" == "0" ]]; then
				parted -s "${selected_element}" -- mklabel gpt
				parted -s "${selected_element}" -- mkpart primary 1MiB 260MiB
				parted -s "${selected_element}" -- mkpart primary 260MiB 100%
				parted -s "${selected_element}" -- set 1 esp on
				local partitions=($(blkid -o device "${selected_element}"* | sed '1d'))
				formatter btrfs "${partitions[1]}"
				formatter fat32 "${partitions[0]}"
				mounter "${partitions[1]}" /
				mounter "${partitions[0]}" /efi
			fi
		fi
	}
	manual_partitions() {
		edit_partitions() {
			title="Edit partitions" \
			menu $(lsblk -dnp -o name)
			if [[ "${?}" == "0" ]]; then
				cgdisk "${selected_element}"
				whiptail --title "Edit partitions" --yesno --defaultno "Continue editing partitions?" 0 0 3>&1 1>&2 2>&3
				if [[ "${?}" == "0" ]]; then
					"${FUNCNAME[0]}"
				fi
			fi
		}
		format_partitions() {
			title="Format partitions" \
			menu $(blkid -o device)
			if [[ "${?}" == "0" ]]; then
				local partition="${selected_element}"
				title="${partition}" \
				menu "btrfs" "ext4" "f2fs" "fat32"
				if [[ "${?}" == "0" ]]; then
					formatter "${selected_element}" "${partition}"
					whiptail --title "Format partitions" --yesno "Continue to format partitions?" 0 0 3>&1 1>&2 2>&3
					if [[ "${?}" == "0" ]]; then
						"${FUNCNAME[0]}"
					fi
				fi
			fi
		}
		mount_partitions() {
			title="Mount partitions" \
			menu $(blkid -o device)
			if [[ "${?}" == "0" ]]; then
				local partition="${selected_element}"
				title="${partition}" \
				menu "/" "/efi" "other"
				if [[ "${?}" == "0" ]]; then
					mounter "${partition}" "${selected_element}"
					whiptail --title "Format partitions" --yesno "Continue to mount partitions?" 0 0 3>&1 1>&2 2>&3
					if [[ "${?}" == "0" ]]; then
						"${FUNCNAME[0]}"
					fi
				fi
			fi
		}
		title="Manual partitions" \
		menu "Edit-partitions" "Format-partitions" "Mount-partitions"
		action "edit_partitions" "format_partitions" "mount_partitions"
	}
	title="Partitions" \
	menu "Auto-partition" "Manual-partition"
	action "auto_partitions" "manual_partitions"
}
install() {
	if ! findmnt /mnt > /dev/null; then
		whiptail --msgbox "Please mount the partitions first..." 0 0
		return 1
	fi
	timedatectl set-ntp true
	pacstrap /mnt base linux-zen linux-firmware "${FS_UTILS[@]}"
	genfstab -U /mnt > /mnt/etc/fstab
	echo "KEYMAP=${KEYMAP:-us}" > /mnt/etc/vconsole.conf
	echo "keyserver hkp://keyserver.ubuntu.com:80" >> /mnt/etc/pacman.d/gnupg/gpg.conf
	arch-chroot /mnt pacman-key --recv-key 3056513887B78AEB
	arch-chroot /mnt pacman-key --lsign-key 3056513887B78AEB
	arch-chroot /mnt pacman -U --noconfirm 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-keyring.pkg.tar.zst' \
										   'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-mirrorlist.pkg.tar.zst'
	cat <<- EOF >> /mnt/etc/pacman.conf

		[LycusOS-pkgs-repo]
		SigLevel = Optional TrustAll
		Server = https://lycusos.github.io/LycusOS-pkgs-repo/\$arch

		[chaotic-aur]
		Include = /etc/pacman.d/chaotic-mirrorlist
	EOF
	sed -i "s|^#IgnorePkg.*$|IgnorePkg=sudo|" /mnt/etc/pacman.conf
	local packages=( "acpilight" "alacritty" \
					 "betterlockscreen" "bspwm" \
					 "chromium" \
					 "dhcpcd" "doas" "dunst" \
					 "efibootmgr" "eog" \
					 "fish" \
					 "grub" "gvfs-mtp" \
					 "libnotify" "lxappearance-gtk3" "lycusos-configs" "lycusos-hooks" \
					 "micro" "mpv" \
					 "nitrogen" "noto-fonts" \
					 "orchis-theme-git" \
					 "pamixer" "pamac" "picom-ibhagwan-git" "pipewire-pulse" "polkit-gnome" "polybar" \
					 "rofi" \
					 "scrot" "sxhkd" \
					 "tar" "tela-circle-icon-theme-git" "thunar" "ttf-font-awesome" \
					 "unzip" \
					 "vimix-cursors" \
					 "xarchiver" "xorg-server" "xorg-xinit" "xorg-xsetroot" \
					 "zip" )
	local services=( "dhcpcd" )
	case $(lscpu | grep "name" | awk '{print $3}') in
		"A"*) packages+=( "amd-ucode" );;
		"I"*) packages+=( "intel-ucode" );;
	esac
	for i in $(lspci | grep "VGA" | awk '{print $5}'); do
		case "${i}" in
			"A"*) packages+=( "xf86-video-amdgpu" );;
			"I"*) packages+=( "xf86-video-intel" );;
			"N"*) packages+=( "nvidia-dkms" "linux-zen-headers" );;
		esac
	done
	if dmesg | grep "wlan0" > /dev/null; then
		packages+=( "iwd" )
		services+=( "iwd" )
	fi
	if dmesg | grep "Bluetooth" > /dev/null; then
		packages+=( "bluez" "bluez-utils" )
		services+=( "bluetooth" )
	fi
	if dmesg | grep "battery" > /dev/null; then
		packages+=( "tlp" "tlp-rdw" )
		services+=( "tlp" )
	fi
	arch-chroot /mnt pacman -Sy --noconfirm --needed "${packages[@]}"
	arch-chroot /mnt systemctl enable "${services[@]}"
	arch-chroot /mnt mkinitcpio -P
	arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=LycusOS
	arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
	echo "permit persist :wheel" > /etc/doas.conf
	ln -s /mnt/usr/bin/doas /mnt/usr/local/bin/sudo
}
config() {
	timezone() {
		title="Timezone" default="Asia" \
		menu $(ls -l /usr/share/zoneinfo/ | grep '^d' | gawk -F':[0-9]* ' '/:/{print $2}')
		if [[ "${?}" == "0" ]]; then
			local timezone="${selected_element}"
			title="Timezone" default="Kolkata" \
			menu $(ls /usr/share/zoneinfo/"${timezone}")
			if [[ "${?}" == "0" ]]; then
				ln -sf /mnt/usr/share/zoneinfo/"${timezone}"/"${selected_element}" /mnt/etc/localtime
			fi
		fi
	}
	locale() {
		title="Locale" default="en_US.UTF-8" \
		menu $(cat /etc/locale.gen | sed '1,23d' | sed 's|#||' | awk '{print $1}')
		if [[ "${?}" == "0" ]]; then
			sed -i "s|^#${selected_element}|${selected_element}|" /mnt/etc/locale.gen
			echo "LANG=${selected_element}" > /mnt/etc/locale.conf
			arch-chroot /mnt locale-gen
		fi
	}
	hostname() {
		local hostname
		hostname=$(whiptail --title "Hostname" --inputbox "Enter hostname" 0 0 3>&1 1>&2 2>&3)
		if [[ "${?}" == "0" ]]; then
			echo "${hostname}" > /mnt/etc/hostname
			cat <<- EOF > /mnt/etc/hosts
				127.0.0.1   localhost
				::1 localhost
				127.0.1.1   ${hostname}.localdomain  ${hostname}
			EOF
		fi
	}
	users() {
		root_passwd() {
			arch-chroot /mnt passwd
			if ! [[ "${?}" == 0 ]]; then
				whiptail --msgbox "Couldn't set password for root, please try again!" 0 0
			fi
		}
		add_user() {
			local user
			user=$(whiptail --title "Add user (with sudo perms)" --inputbox "Enter username" 0 0 3>&1 1>&2 2>&3)
			if [[ "${?}" == "0" ]]; then
				arch-chroot /mnt useradd -m -s /usr/local/bin/bashfish -G wheel,video "${user}"
				arch-chroot /mnt passwd "${user}"
				if ! [[ "${?}" == 0 ]]; then
					whiptail --msgbox "Couldn't set password for ${user}, please try again!" 0 0
				else
					arch-chroot /mnt systemctl enable betterlockscreen@"${user}"
				fi
			fi
		}
		title="Users" \
		menu "Root-password" "Add-user"
		action "root_passwd" "add_user"
	}
	title="Configure" \
	menu "Timezone" "Locale" "Hostname" "Users"
	action "timezone" "locale" "hostname" "users"
}
reboot() {
	umount -R /mnt
	systemctl reboot
}
main() {
	menu() {
		elements_array=()
		for i in "${@}"; do
			elements_array+=("${i}" "")
		done
		selected_element=$(whiptail --menu "" --title "${title}" --default-item "${default}" --cancel-button "${cancel:-Back}" 0 0 0 "${elements_array[@]}" 3>&1 1>&2 2>&3)
	}
	action() {
		if [[ "${?}" == "0" ]]; then
			for i in $(seq 0 2 $(("${#elements_array[@]}"-2))); do
				if [[ "${elements_array[${i}]}" == "${selected_element}" ]]; then
					local functions_array=("${@}")
					local default="${elements_array[$((${i}+2))]}"
					if [[ "${i}" == $(("${#elements_array[@]}"-2)) ]]; then
						default="${elements_array[${i}]}"
					fi
					"${functions_array[$((${i}/2))]}"
					"${FUNCNAME[1]}"
				fi
			done
		fi
		clear
	}
	title="LycusOS installer" cancel="Exit" \
	menu "Key-layout(optional)" "Wlan/Wifi(optional)" "Partitions" "Install" "Configure" "Reboot"
	action "key_layout" "wlan" "partitions" "install" "config" "reboot"
}
if findmnt /mnt > /dev/null; then
	umount -R /mnt
fi
main
